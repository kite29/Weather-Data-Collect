package com.stylefeng.guns;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;


import org.apache.http.HttpResponse;
import org.apache.http.util.EntityUtils;
import org.apache.tomcat.jni.Time;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;

import com.stylefeng.guns.core.util.HttpUtils;
import com.stylefeng.guns.core.util.WeatherUtils;
import com.stylefeng.guns.modular.system.dao.AqiMapper;
import com.stylefeng.guns.modular.system.dao.CityMapper;
import com.stylefeng.guns.modular.system.dao.WeatherMapper;
import com.stylefeng.guns.modular.system.model.Aqi;
import com.stylefeng.guns.modular.system.model.City;
import com.stylefeng.guns.modular.system.model.Weather;
import com.stylefeng.guns.modular.weatherdata.entity.JsonRootBean;


/**
 * SpringBoot方式启动类
 *
 * @author stylefeng
 * @Date 2017/5/21 12:06
 */
@SpringBootApplication
public class GunsApplication {

    private final static Logger logger = LoggerFactory.getLogger(GunsApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(GunsApplication.class, args);
        
        logger.info("GunsApplication is success!");
        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
        // 参数：1、任务体 2、首次执行的延时时间
        //      3、任务执行间隔 4、间隔时间单位
        //25个城市1个任务
        
        service.scheduleAtFixedRate(()->doOrder(1,25), 0, 30, TimeUnit.MINUTES);
      
        service.scheduleAtFixedRate(()->doOrder(26,50), 15, 30, TimeUnit.MINUTES);
   
        //service.scheduleAtFixedRate(()->doOrder(51,75), 30, 60, TimeUnit.MINUTES);
      
        //service.scheduleAtFixedRate(()->doOrder(76,100), 45, 60, TimeUnit.MINUTES);
        
       
        
        
    }
    
    
    //从第n个城市到m城市写库
    static void doOrder(int startnum, int endnum){
    	System.out.println("正在处理第"+startnum+"城市");
    	ApplicationContext applicationContext = WeatherUtils.getApplicationContext();
    	CityMapper cityMapper= applicationContext.getBean(CityMapper.class);
    	List<City> cityList = cityMapper.selectList(null);
    	//判断城市数量和当前处理数
    	if (cityList.isEmpty() | (cityList.size()<startnum))
    	{
    		
    	}
    	else {
    		//循环处理
    		for(int i=(startnum-1);i<Math.min(cityList.size()+startnum-1, endnum);i++) {
    			
    		doweather(cityList.get(i).getCity());
    		}
    	}
    }
    
    
    //处理某城市天气读取和入库
    	static void doweather(String city) {
    		ApplicationContext applicationContext = WeatherUtils.getApplicationContext();
    	    String host = "https://jisutqybmf.market.alicloudapi.com";
    	    String path = "/weather/query";
    	    String method = "GET";
    	    String appcode = "4a00f79aa94649209f4ebbbc34a98ce1";
    	    Map<String, String> headers = new HashMap<String, String>();
    	    //最后在header中的格式(中间是英文空格)为Authorization:APPCODE 83359fd73fe94948385f570e3c139105
    	    headers.put("Authorization", "APPCODE " + appcode);
    	    Map<String, String> querys = new HashMap<String, String>();
    	    querys.put("city", city);
    	    querys.put("citycode", "citycode");
    	    querys.put("cityid", "cityid");
    	    querys.put("ip", "ip");
    	    querys.put("location", "location");


    	    try {
    	    	/**
    	    	* 重要提示如下:
    	    	* HttpUtils请从
    	    	* https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/src/main/java/com/aliyun/api/gateway/demo/util/HttpUtils.java
    	    	* 下载
    	    	*
    	    	* 相应的依赖请参照
    	    	* https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/pom.xml
    	    	*/
    	    	System.out.println("正在连接天气服务~");
    	    	 HttpResponse response = HttpUtils.doGet(host, path, method, headers, querys);
    	    	 
    	    	//System.out.println(response.getStatusLine());//打印header
    	    	//EntityUtils.toString(response.getEntity())  //获取response的body

    	    	//to json
    	        String json=EntityUtils.toString(response.getEntity());
    	        if(json.length()<1) { 
    	        	System.out.println("出问题了……………………"+response.getStatusLine()+new Date());
    	        	//System.out.println("json长度~"+json.length());
    	        	}else {
    	    	
    	    	//转换javabeen
    	    	JsonRootBean weather = JSON.parseObject(json, new TypeReference<JsonRootBean>() {});
    	    	
    	    	System.out.println("当前天气:"+new Date());
    	    	System.out.println("城市："+weather.getResult().getCity());
    	    	System.out.println("温度："+weather.getResult().getTemp());
    	    	System.out.println("天气状况："+weather.getResult().getWeather());
    	    	System.out.println("更新时间："+weather.getResult().getUpdatetime());
    	    	System.out.println("湿度："+weather.getResult().getHumidity());
    	    	//System.out.println("风向："+weather.getResult().getWinddirect());
    	    	//System.out.println("风速："+weather.getResult().getWindspeed());
    	    	System.out.println("pm2.5："+weather.getResult().getAqi().getIpm25());
    	    	
    	    	
    	    	//写库
    	    	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    		    //写入weather库
    		    
    		   WeatherMapper weatherMapper= applicationContext.getBean(WeatherMapper.class);
    		   
    		   Weather entity =new Weather();
    		   entity.setCity(weather.getResult().getCity());
       		   entity.setUpdatetime(formatter.parse(weather.getResult().getUpdatetime()));
    		   entity.setLogtime(new Date());
    		   entity.setWeathers(weather.getResult().getWeather());
    		   entity.setTemp(Float.valueOf(weather.getResult().getTemp()));
    		   entity.setHumidity(Float.valueOf(weather.getResult().getHumidity()));
    		   entity.setPm25(Float.valueOf(weather.getResult().getAqi().getIpm25()));
    		   entity.setWind(Float.valueOf(weather.getResult().getWindspeed()));
    		   entity.setDiretion(weather.getResult().getWinddirect());
    		   entity.setWindpower(Float.valueOf(weather.getResult().getWindpower()));
    		   entity.setPressure(Float.valueOf(weather.getResult().getPressure()));
    		   weatherMapper.insert(entity);
    		 
    		   //写入aqi库
    		   AqiMapper aqiMapper= applicationContext.getBean(AqiMapper.class);
    		   com.stylefeng.guns.modular.system.model.Aqi entity1 =new Aqi();
    		   entity1.setCity(weather.getResult().getCity());
    		   entity1.setUpdatetime(formatter.parse(weather.getResult().getUpdatetime()));
    		   entity1.setLogtime(new Date());
    		   entity1.setSo2(Float.valueOf(weather.getResult().getAqi().getSo2()));
    		   entity1.setSo224(Float.valueOf(weather.getResult().getAqi().getSo224()));
    		   entity1.setNo2(Float.valueOf(weather.getResult().getAqi().getNo2()));
    		   entity1.setNo224(Float.valueOf(weather.getResult().getAqi().getNo224()));
    		   entity1.setCo(Float.valueOf(weather.getResult().getAqi().getCo()));
    		   entity1.setCo24(Float.valueOf(weather.getResult().getAqi().getCo24()));
    		   entity1.setO3(Float.valueOf(weather.getResult().getAqi().getO3()));
    		   entity1.setO38(Float.valueOf(weather.getResult().getAqi().getO38()));
    		   entity1.setO324(Float.valueOf(weather.getResult().getAqi().getO324()));
    		   entity1.setPm10(Float.valueOf(weather.getResult().getAqi().getPm10()));
    		   entity1.setPm1024(Float.valueOf(weather.getResult().getAqi().getPm1024()));
    		   entity1.setPm25(Float.valueOf(weather.getResult().getAqi().getPm25()));
    		   entity1.setPm2524(Float.valueOf(weather.getResult().getAqi().getPm2524()));
    		   entity1.setIso2(Float.valueOf(weather.getResult().getAqi().getIso2()));
    		   entity1.setIno2(Float.valueOf(weather.getResult().getAqi().getIno2()));
    		   entity1.setIco(Float.valueOf(weather.getResult().getAqi().getIco()));
    		   entity1.setIo3(Float.valueOf(weather.getResult().getAqi().getIo3()));
    		   entity1.setIo38(Float.valueOf(weather.getResult().getAqi().getIo38()));
    		   entity1.setIpm10(Float.valueOf(weather.getResult().getAqi().getIpm10()));
    		   entity1.setIpm25(Float.valueOf(weather.getResult().getAqi().getIpm25()));
    		   entity1.setAqi(Float.valueOf(weather.getResult().getAqi().getAqi()));
    		   entity1.setPrimarypollutant(weather.getResult().getAqi().getPrimarypollutant());
    		   entity1.setQuality(weather.getResult().getAqi().getQuality());

    		   aqiMapper.insert(entity1);}
    		   
    		    
    	    } catch (Exception e) {
    	    	e.printStackTrace();
    	    }
    	}

}
